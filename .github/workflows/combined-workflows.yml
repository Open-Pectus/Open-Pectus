# because github actions are shit, we need to combine every workflow in one file in order to be able to have jobs depend correctly on other jobs

name: Combined Workflows

on:
  push:
    branches: [ "main", "141-runlog-backend-implementation" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SHOULD_PUBLISH_IMAGE: ${{ github.ref == 'refs/heads/main' }}
  #SHOULD_PUBLISH_IMAGE: ${{ github.ref == 'refs/heads/112-standard-tags' }}
  #SHOULD_PUBLISH_IMAGE: ${{ github.head_ref == '112-standard-tags' }}
  NODE_VERSION: 18.16

jobs:

  test_backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r openpectus/requirements.txt
      - name: Install OpenPectus (as editable)
        run: |
          pip install -e .
      - name: Lint with flake8
        run: |
          # use configuration from ./.flake8
          cd openpectus
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings.
          #flake8 . --count --exit-zero --statistics
      - name: Lint with flake8 (warnings)
        run: |
          # use configuration from ./.flake8
          cd openpectus
          if ! flake8 . --count --statistics; then
            echo "::warning::Flake8 Lint Warning"
          fi
      - name: Test with unittest
        run: |
          cd openpectus
          python -m unittest

  build_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'openpectus/frontend/package-lock.json'
      - name: npm ci, build
        working-directory: "openpectus/frontend"
        run: |
          npm ci
          npm run build
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: "openpectus/frontend/dist"

  package_dist:
    runs-on: ubuntu-latest
    needs: [build_frontend, test_backend]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install openpectus python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r openpectus/requirements.txt
      - name: Download frontend dist into aggregator
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: openpectus/aggregator/frontend-dist
      - name: Build OpenPectus with frontend dist
        run: |
          python -m build -o openpectus/dist
      - name: Archive production bundle artifact
        uses: actions/upload-artifact@v3
        with:
          name: openpectus-dist
          path: |
            openpectus/dist
            openpectus/Dockerfile
            openpectus/requirements.txt


  publish_docker_image:
    needs: [package_dist]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download openpectus-dist artifact
        uses: actions/download-artifact@v3
        with:
          name: openpectus-dist          
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ secrets.ACR_ENDPOINT }}/open-pectus
      - name: Log in to GitHub container registry
        if: ${{ env.SHOULD_PUBLISH_IMAGE }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to Azure container registry
        if: ${{ env.SHOULD_PUBLISH_IMAGE }}
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ACR_ENDPOINT }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Build and push container image to registries
        uses: docker/build-push-action@v4
        with:
          push: ${{ env.SHOULD_PUBLISH_IMAGE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: .
          file: ./Dockerfile
