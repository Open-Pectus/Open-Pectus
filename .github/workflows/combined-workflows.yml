# because github actions are shit, we need to combine every workflow in one file in order to be able to have jobs depend correctly on other jobs

name: Combined Workflows

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SHOULD_PUBLISH_IMAGE: ${{ github.ref == 'refs/heads/main' }}
  NODE_VERSION: 20.15

jobs:

  test_backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r openpectus/requirements.txt
      - name: Install OpenPectus (as editable)
        run: |
          pip install -e .
      - name: Lint with flake8
        run: |
          # use configuration from ./.flake8
          cd openpectus
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings.
          #flake8 . --count --exit-zero --statistics
      - name: Lint with flake8 (warnings)
        run: |
          # use configuration from ./.flake8
          cd openpectus
          if ! flake8 . --count --statistics; then
            echo "::warning::Flake8 Lint Warning"
          fi
      - name: Type check with pyright
        run: |
          pyright
      - name: Test with unittest
        run: |
          cd openpectus
          # run unittest via xmlrunner that outputs test reports in junit xml format
          python -m xmlrunner discover -t . -o test/test-reports/
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Tests Report
          path: openpectus/test/test-reports/*.xml
          #reporter: jest-junit        # Format of test results, jest is same as junit xml
          reporter: java-junit          

  build_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'openpectus/frontend/package-lock.json'
      - name: npm ci, lint, build
        working-directory: "openpectus/frontend"
        run: |
          npm ci
          npm run lint
          npm run build
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: "openpectus/frontend/dist"

  package_dist:
    runs-on: ubuntu-latest
    needs: [build_frontend, test_backend]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install openpectus python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r openpectus/requirements.txt
      - name: Download frontend dist into aggregator
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: openpectus/aggregator/frontend-dist
      - name: Add build number to build.json
        env:
          #Version: ${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}
          build_number: ${{ github.run_number }}/${{ github.run_attempt }}
        run: |
          echo "{\"build_number\": \"$build_number\"}" > openpectus/build.json
          echo "Build number: $build_number"
      - name: Build OpenPectus with frontend dist (package openpectus-x.y.z.tar.gz)
        # build openpectus-x.y.z.tar.gz using version number defined in source (__version__ in __init__.py)
        run: |
          python -m build --sdist -o openpectus/dist
      - name: Rename package to remove version number (openpectus.tar.gz)
        # rename package file openpectus-x.y.z.tar.gz to openpectus.tar.gz for a Dockerfile independent of version
        run: |
          mv openpectus/dist/openpectus-*.tar.gz openpectus/dist/openpectus.tar.gz
      - name: Archive production bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: openpectus-dist
          path: |
            openpectus/dist
            openpectus/Dockerfile
            openpectus/requirements.txt


  publish_docker_image:
    needs: [package_dist]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download openpectus-dist artifact
        uses: actions/download-artifact@v4
        with:
          name: openpectus-dist
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ secrets.ACR_ENDPOINT }}/open-pectus
      - name: Log in to GitHub container registry
        if: ${{ env.SHOULD_PUBLISH_IMAGE }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Log in to Azure container registry
        if: ${{ env.SHOULD_PUBLISH_IMAGE }}
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_ENDPOINT }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Build and push container image to registries
        uses: docker/build-push-action@v5
        with:
          push: ${{ env.SHOULD_PUBLISH_IMAGE }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: .
          file: ./Dockerfile
      # https://docs.digitalocean.com/reference/api/api-reference/#operation/apps_create_deployment
      - name: Trigger deployment in Digital Ocean after push to Github container registry
        run: |
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_TOKEN }}" "https://api.digitalocean.com/v2/apps/${{ secrets.DIGITALOCEAN_APP_ID }}/deployments"

  deploy_image:
    needs: [publish_docker_image]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.ACR_DEPLOY_CREDENTIALS }}
      - name: Deploy to Azure Container Instances
        uses: azure/aci-deploy@v1
        with:
          dns-name-label: open-pectus-github
          resource-group: ${{ secrets.ACR_DEPLOY_RESOURCE_GROUP }}
          image: ${{ secrets.ACR_ENDPOINT }}/open-pectus:main
          registry-login-server: ${{ secrets.ACR_DEPLOY_LOGIN_SERVER }}
          registry-username: ${{ secrets.ACR_DEPLOY_USERNAME }}
          registry-password: ${{ secrets.ACR_DEPLOY_SECRET }}
          name: open-pectus-github
          environment-variables: AGGREGATOR_PORT=80
          location: 'west europe'
