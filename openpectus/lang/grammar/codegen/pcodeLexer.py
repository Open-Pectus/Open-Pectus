# Generated from c:/Projects/Novo/Open-Pectus/openpectus/lang/grammar/pcode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,289,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,3,12,160,8,12,1,13,1,13,1,13,3,13,165,8,13,1,
        14,1,14,1,14,3,14,170,8,14,1,15,1,15,1,15,3,15,175,8,15,1,16,1,16,
        1,16,1,16,1,16,3,16,182,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,201,8,17,
        1,18,1,18,1,18,1,18,1,18,5,18,208,8,18,10,18,12,18,211,9,18,1,18,
        1,18,1,18,4,18,216,8,18,11,18,12,18,217,3,18,220,8,18,1,19,4,19,
        223,8,19,11,19,12,19,224,1,19,1,19,4,19,229,8,19,11,19,12,19,230,
        3,19,233,8,19,1,19,4,19,236,8,19,11,19,12,19,237,1,19,1,19,4,19,
        242,8,19,11,19,12,19,243,3,19,246,8,19,3,19,248,8,19,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,261,8,20,1,21,1,
        21,3,21,265,8,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,
        26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,3,30,286,8,30,1,
        31,1,31,0,0,32,1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,
        23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,
        45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,1,0,
        3,2,0,65,90,97,122,1,0,48,57,2,0,10,10,13,13,323,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,67,
        1,0,0,0,5,69,1,0,0,0,7,75,1,0,0,0,9,81,1,0,0,0,11,86,1,0,0,0,13,
        92,1,0,0,0,15,100,1,0,0,0,17,105,1,0,0,0,19,111,1,0,0,0,21,121,1,
        0,0,0,23,132,1,0,0,0,25,159,1,0,0,0,27,164,1,0,0,0,29,169,1,0,0,
        0,31,174,1,0,0,0,33,181,1,0,0,0,35,200,1,0,0,0,37,202,1,0,0,0,39,
        247,1,0,0,0,41,260,1,0,0,0,43,264,1,0,0,0,45,266,1,0,0,0,47,268,
        1,0,0,0,49,270,1,0,0,0,51,272,1,0,0,0,53,274,1,0,0,0,55,276,1,0,
        0,0,57,278,1,0,0,0,59,280,1,0,0,0,61,285,1,0,0,0,63,287,1,0,0,0,
        65,66,7,0,0,0,66,2,1,0,0,0,67,68,7,1,0,0,68,4,1,0,0,0,69,70,5,87,
        0,0,70,71,5,97,0,0,71,72,5,116,0,0,72,73,5,99,0,0,73,74,5,104,0,
        0,74,6,1,0,0,0,75,76,5,65,0,0,76,77,5,108,0,0,77,78,5,97,0,0,78,
        79,5,114,0,0,79,80,5,109,0,0,80,8,1,0,0,0,81,82,5,83,0,0,82,83,5,
        116,0,0,83,84,5,111,0,0,84,85,5,112,0,0,85,10,1,0,0,0,86,87,5,80,
        0,0,87,88,5,97,0,0,88,89,5,117,0,0,89,90,5,115,0,0,90,91,5,101,0,
        0,91,12,1,0,0,0,92,93,5,82,0,0,93,94,5,101,0,0,94,95,5,115,0,0,95,
        96,5,116,0,0,96,97,5,97,0,0,97,98,5,114,0,0,98,99,5,116,0,0,99,14,
        1,0,0,0,100,101,5,77,0,0,101,102,5,97,0,0,102,103,5,114,0,0,103,
        104,5,107,0,0,104,16,1,0,0,0,105,106,5,66,0,0,106,107,5,108,0,0,
        107,108,5,111,0,0,108,109,5,99,0,0,109,110,5,107,0,0,110,18,1,0,
        0,0,111,112,5,69,0,0,112,113,5,110,0,0,113,114,5,100,0,0,114,115,
        5,32,0,0,115,116,5,98,0,0,116,117,5,108,0,0,117,118,5,111,0,0,118,
        119,5,99,0,0,119,120,5,107,0,0,120,20,1,0,0,0,121,122,5,69,0,0,122,
        123,5,110,0,0,123,124,5,100,0,0,124,125,5,32,0,0,125,126,5,98,0,
        0,126,127,5,108,0,0,127,128,5,111,0,0,128,129,5,99,0,0,129,130,5,
        107,0,0,130,131,5,115,0,0,131,22,1,0,0,0,132,133,5,73,0,0,133,134,
        5,110,0,0,134,135,5,99,0,0,135,136,5,114,0,0,136,137,5,101,0,0,137,
        138,5,109,0,0,138,139,5,101,0,0,139,140,5,110,0,0,140,141,5,116,
        0,0,141,142,5,32,0,0,142,143,5,114,0,0,143,144,5,117,0,0,144,145,
        5,110,0,0,145,146,5,32,0,0,146,147,5,99,0,0,147,148,5,111,0,0,148,
        149,5,117,0,0,149,150,5,110,0,0,150,151,5,116,0,0,151,152,5,101,
        0,0,152,153,5,114,0,0,153,24,1,0,0,0,154,160,3,27,13,0,155,160,3,
        29,14,0,156,160,3,31,15,0,157,160,3,33,16,0,158,160,3,35,17,0,159,
        154,1,0,0,0,159,155,1,0,0,0,159,156,1,0,0,0,159,157,1,0,0,0,159,
        158,1,0,0,0,160,26,1,0,0,0,161,165,5,76,0,0,162,163,5,109,0,0,163,
        165,5,76,0,0,164,161,1,0,0,0,164,162,1,0,0,0,165,28,1,0,0,0,166,
        167,5,107,0,0,167,170,5,103,0,0,168,170,5,103,0,0,169,166,1,0,0,
        0,169,168,1,0,0,0,170,30,1,0,0,0,171,175,5,109,0,0,172,173,5,99,
        0,0,173,175,5,109,0,0,174,171,1,0,0,0,174,172,1,0,0,0,175,32,1,0,
        0,0,176,182,5,104,0,0,177,178,5,109,0,0,178,179,5,105,0,0,179,182,
        5,110,0,0,180,182,5,115,0,0,181,176,1,0,0,0,181,177,1,0,0,0,181,
        180,1,0,0,0,182,34,1,0,0,0,183,201,5,37,0,0,184,185,5,67,0,0,185,
        201,5,86,0,0,186,187,5,65,0,0,187,201,5,85,0,0,188,189,5,76,0,0,
        189,190,5,47,0,0,190,201,5,104,0,0,191,192,5,107,0,0,192,193,5,103,
        0,0,193,194,5,47,0,0,194,201,5,104,0,0,195,196,5,109,0,0,196,197,
        5,115,0,0,197,198,5,47,0,0,198,199,5,99,0,0,199,201,5,109,0,0,200,
        183,1,0,0,0,200,184,1,0,0,0,200,186,1,0,0,0,200,188,1,0,0,0,200,
        191,1,0,0,0,200,195,1,0,0,0,201,36,1,0,0,0,202,219,3,1,0,0,203,208,
        3,1,0,0,204,208,3,3,1,0,205,208,3,43,21,0,206,208,3,45,22,0,207,
        203,1,0,0,0,207,204,1,0,0,0,207,205,1,0,0,0,207,206,1,0,0,0,208,
        211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,215,1,0,0,0,211,
        209,1,0,0,0,212,216,3,1,0,0,213,216,3,3,1,0,214,216,3,45,22,0,215,
        212,1,0,0,0,215,213,1,0,0,0,215,214,1,0,0,0,216,217,1,0,0,0,217,
        215,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,209,1,0,0,0,219,
        220,1,0,0,0,220,38,1,0,0,0,221,223,3,3,1,0,222,221,1,0,0,0,223,224,
        1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,232,1,0,0,0,226,228,
        3,47,23,0,227,229,3,3,1,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,
        1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,226,1,0,0,0,232,233,
        1,0,0,0,233,248,1,0,0,0,234,236,3,3,1,0,235,234,1,0,0,0,236,237,
        1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,245,1,0,0,0,239,241,
        3,49,24,0,240,242,3,3,1,0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,
        1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,239,1,0,0,0,245,246,
        1,0,0,0,246,248,1,0,0,0,247,222,1,0,0,0,247,235,1,0,0,0,248,40,1,
        0,0,0,249,261,5,61,0,0,250,251,5,61,0,0,251,261,5,61,0,0,252,253,
        5,60,0,0,253,261,5,61,0,0,254,261,5,60,0,0,255,256,5,62,0,0,256,
        261,5,61,0,0,257,261,5,62,0,0,258,259,5,33,0,0,259,261,5,61,0,0,
        260,249,1,0,0,0,260,250,1,0,0,0,260,252,1,0,0,0,260,254,1,0,0,0,
        260,255,1,0,0,0,260,257,1,0,0,0,260,258,1,0,0,0,261,42,1,0,0,0,262,
        265,3,51,25,0,263,265,3,53,26,0,264,262,1,0,0,0,264,263,1,0,0,0,
        265,44,1,0,0,0,266,267,5,95,0,0,267,46,1,0,0,0,268,269,5,46,0,0,
        269,48,1,0,0,0,270,271,5,44,0,0,271,50,1,0,0,0,272,273,5,32,0,0,
        273,52,1,0,0,0,274,275,5,9,0,0,275,54,1,0,0,0,276,277,5,35,0,0,277,
        56,1,0,0,0,278,279,5,58,0,0,279,58,1,0,0,0,280,281,5,45,0,0,281,
        60,1,0,0,0,282,286,7,2,0,0,283,284,5,13,0,0,284,286,5,10,0,0,285,
        282,1,0,0,0,285,283,1,0,0,0,286,62,1,0,0,0,287,288,9,0,0,0,288,64,
        1,0,0,0,22,0,159,164,169,174,181,200,207,209,215,217,219,224,230,
        232,237,243,245,247,260,264,285,0
    ]

class pcodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WATCH = 1
    ALARM = 2
    STOP = 3
    PAUSE = 4
    RESTART = 5
    MARK = 6
    BLOCK = 7
    END_BLOCK = 8
    END_BLOCKS = 9
    INCREMENT_RC = 10
    CONDITION_UNIT = 11
    VOLUME_UNIT = 12
    MASS_UNIT = 13
    DISTANCE_UNIT = 14
    DURATION_UNIT = 15
    OTHER_UNIT = 16
    IDENTIFIER = 17
    POSITIVE_FLOAT = 18
    COMPARE_OP = 19
    WHITESPACE = 20
    UNDERSCORE = 21
    PERIOD = 22
    COMMA = 23
    SPACE = 24
    TAB = 25
    HASH = 26
    COLON = 27
    MINUS = 28
    NEWLINE = 29
    ANY = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Watch'", "'Alarm'", "'Stop'", "'Pause'", "'Restart'", "'Mark'", 
            "'Block'", "'End block'", "'End blocks'", "'Increment run counter'", 
            "'_'", "'.'", "','", "' '", "'\\t'", "'#'", "':'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "WATCH", "ALARM", "STOP", "PAUSE", "RESTART", "MARK", "BLOCK", 
            "END_BLOCK", "END_BLOCKS", "INCREMENT_RC", "CONDITION_UNIT", 
            "VOLUME_UNIT", "MASS_UNIT", "DISTANCE_UNIT", "DURATION_UNIT", 
            "OTHER_UNIT", "IDENTIFIER", "POSITIVE_FLOAT", "COMPARE_OP", 
            "WHITESPACE", "UNDERSCORE", "PERIOD", "COMMA", "SPACE", "TAB", 
            "HASH", "COLON", "MINUS", "NEWLINE", "ANY" ]

    ruleNames = [ "LETTER", "DIGIT", "WATCH", "ALARM", "STOP", "PAUSE", 
                  "RESTART", "MARK", "BLOCK", "END_BLOCK", "END_BLOCKS", 
                  "INCREMENT_RC", "CONDITION_UNIT", "VOLUME_UNIT", "MASS_UNIT", 
                  "DISTANCE_UNIT", "DURATION_UNIT", "OTHER_UNIT", "IDENTIFIER", 
                  "POSITIVE_FLOAT", "COMPARE_OP", "WHITESPACE", "UNDERSCORE", 
                  "PERIOD", "COMMA", "SPACE", "TAB", "HASH", "COLON", "MINUS", 
                  "NEWLINE", "ANY" ]

    grammarFileName = "pcode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


