# Generated from pcode.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,251,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
        1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,15,5,15,170,8,15,10,15,12,15,173,9,15,1,15,1,15,1,15,4,15,
        178,8,15,11,15,12,15,179,3,15,182,8,15,1,16,4,16,185,8,16,11,16,
        12,16,186,1,16,1,16,4,16,191,8,16,11,16,12,16,192,3,16,195,8,16,
        1,16,4,16,198,8,16,11,16,12,16,199,1,16,1,16,4,16,204,8,16,11,16,
        12,16,205,3,16,208,8,16,3,16,210,8,16,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,3,17,223,8,17,1,18,1,18,3,18,227,8,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,26,1,26,1,27,1,27,1,27,3,27,248,8,27,1,28,1,28,0,0,29,1,0,
        3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,
        29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,
        51,24,53,25,55,26,57,27,1,0,3,2,0,65,90,97,122,1,0,48,57,2,0,10,
        10,13,13,271,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,61,1,0,0,0,5,
        63,1,0,0,0,7,69,1,0,0,0,9,75,1,0,0,0,11,80,1,0,0,0,13,86,1,0,0,0,
        15,91,1,0,0,0,17,96,1,0,0,0,19,104,1,0,0,0,21,109,1,0,0,0,23,115,
        1,0,0,0,25,121,1,0,0,0,27,131,1,0,0,0,29,142,1,0,0,0,31,164,1,0,
        0,0,33,209,1,0,0,0,35,222,1,0,0,0,37,226,1,0,0,0,39,228,1,0,0,0,
        41,230,1,0,0,0,43,232,1,0,0,0,45,234,1,0,0,0,47,236,1,0,0,0,49,238,
        1,0,0,0,51,240,1,0,0,0,53,242,1,0,0,0,55,247,1,0,0,0,57,249,1,0,
        0,0,59,60,7,0,0,0,60,2,1,0,0,0,61,62,7,1,0,0,62,4,1,0,0,0,63,64,
        5,87,0,0,64,65,5,97,0,0,65,66,5,116,0,0,66,67,5,99,0,0,67,68,5,104,
        0,0,68,6,1,0,0,0,69,70,5,65,0,0,70,71,5,108,0,0,71,72,5,97,0,0,72,
        73,5,114,0,0,73,74,5,109,0,0,74,8,1,0,0,0,75,76,5,83,0,0,76,77,5,
        116,0,0,77,78,5,111,0,0,78,79,5,112,0,0,79,10,1,0,0,0,80,81,5,80,
        0,0,81,82,5,97,0,0,82,83,5,117,0,0,83,84,5,115,0,0,84,85,5,101,0,
        0,85,12,1,0,0,0,86,87,5,72,0,0,87,88,5,111,0,0,88,89,5,108,0,0,89,
        90,5,100,0,0,90,14,1,0,0,0,91,92,5,87,0,0,92,93,5,97,0,0,93,94,5,
        105,0,0,94,95,5,116,0,0,95,16,1,0,0,0,96,97,5,82,0,0,97,98,5,101,
        0,0,98,99,5,115,0,0,99,100,5,116,0,0,100,101,5,97,0,0,101,102,5,
        114,0,0,102,103,5,116,0,0,103,18,1,0,0,0,104,105,5,77,0,0,105,106,
        5,97,0,0,106,107,5,114,0,0,107,108,5,107,0,0,108,20,1,0,0,0,109,
        110,5,66,0,0,110,111,5,97,0,0,111,112,5,116,0,0,112,113,5,99,0,0,
        113,114,5,104,0,0,114,22,1,0,0,0,115,116,5,66,0,0,116,117,5,108,
        0,0,117,118,5,111,0,0,118,119,5,99,0,0,119,120,5,107,0,0,120,24,
        1,0,0,0,121,122,5,69,0,0,122,123,5,110,0,0,123,124,5,100,0,0,124,
        125,5,32,0,0,125,126,5,98,0,0,126,127,5,108,0,0,127,128,5,111,0,
        0,128,129,5,99,0,0,129,130,5,107,0,0,130,26,1,0,0,0,131,132,5,69,
        0,0,132,133,5,110,0,0,133,134,5,100,0,0,134,135,5,32,0,0,135,136,
        5,98,0,0,136,137,5,108,0,0,137,138,5,111,0,0,138,139,5,99,0,0,139,
        140,5,107,0,0,140,141,5,115,0,0,141,28,1,0,0,0,142,143,5,73,0,0,
        143,144,5,110,0,0,144,145,5,99,0,0,145,146,5,114,0,0,146,147,5,101,
        0,0,147,148,5,109,0,0,148,149,5,101,0,0,149,150,5,110,0,0,150,151,
        5,116,0,0,151,152,5,32,0,0,152,153,5,114,0,0,153,154,5,117,0,0,154,
        155,5,110,0,0,155,156,5,32,0,0,156,157,5,99,0,0,157,158,5,111,0,
        0,158,159,5,117,0,0,159,160,5,110,0,0,160,161,5,116,0,0,161,162,
        5,101,0,0,162,163,5,114,0,0,163,30,1,0,0,0,164,181,3,1,0,0,165,170,
        3,1,0,0,166,170,3,3,1,0,167,170,3,37,18,0,168,170,3,39,19,0,169,
        165,1,0,0,0,169,166,1,0,0,0,169,167,1,0,0,0,169,168,1,0,0,0,170,
        173,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,177,1,0,0,0,173,
        171,1,0,0,0,174,178,3,1,0,0,175,178,3,3,1,0,176,178,3,39,19,0,177,
        174,1,0,0,0,177,175,1,0,0,0,177,176,1,0,0,0,178,179,1,0,0,0,179,
        177,1,0,0,0,179,180,1,0,0,0,180,182,1,0,0,0,181,171,1,0,0,0,181,
        182,1,0,0,0,182,32,1,0,0,0,183,185,3,3,1,0,184,183,1,0,0,0,185,186,
        1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,194,1,0,0,0,188,190,
        3,41,20,0,189,191,3,3,1,0,190,189,1,0,0,0,191,192,1,0,0,0,192,190,
        1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,188,1,0,0,0,194,195,
        1,0,0,0,195,210,1,0,0,0,196,198,3,3,1,0,197,196,1,0,0,0,198,199,
        1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,207,1,0,0,0,201,203,
        3,43,21,0,202,204,3,3,1,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,
        1,0,0,0,205,206,1,0,0,0,206,208,1,0,0,0,207,201,1,0,0,0,207,208,
        1,0,0,0,208,210,1,0,0,0,209,184,1,0,0,0,209,197,1,0,0,0,210,34,1,
        0,0,0,211,223,5,61,0,0,212,213,5,61,0,0,213,223,5,61,0,0,214,215,
        5,60,0,0,215,223,5,61,0,0,216,223,5,60,0,0,217,218,5,62,0,0,218,
        223,5,61,0,0,219,223,5,62,0,0,220,221,5,33,0,0,221,223,5,61,0,0,
        222,211,1,0,0,0,222,212,1,0,0,0,222,214,1,0,0,0,222,216,1,0,0,0,
        222,217,1,0,0,0,222,219,1,0,0,0,222,220,1,0,0,0,223,36,1,0,0,0,224,
        227,3,45,22,0,225,227,3,47,23,0,226,224,1,0,0,0,226,225,1,0,0,0,
        227,38,1,0,0,0,228,229,5,95,0,0,229,40,1,0,0,0,230,231,5,46,0,0,
        231,42,1,0,0,0,232,233,5,44,0,0,233,44,1,0,0,0,234,235,5,32,0,0,
        235,46,1,0,0,0,236,237,5,9,0,0,237,48,1,0,0,0,238,239,5,35,0,0,239,
        50,1,0,0,0,240,241,5,58,0,0,241,52,1,0,0,0,242,243,5,45,0,0,243,
        54,1,0,0,0,244,248,7,2,0,0,245,246,5,13,0,0,246,248,5,10,0,0,247,
        244,1,0,0,0,247,245,1,0,0,0,248,56,1,0,0,0,249,250,9,0,0,0,250,58,
        1,0,0,0,16,0,169,171,177,179,181,186,192,194,199,205,207,209,222,
        226,247,0
    ]

class pcodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WATCH = 1
    ALARM = 2
    STOP = 3
    PAUSE = 4
    HOLD = 5
    WAIT = 6
    RESTART = 7
    MARK = 8
    BATCH = 9
    BLOCK = 10
    END_BLOCK = 11
    END_BLOCKS = 12
    INCREMENT_RC = 13
    IDENTIFIER = 14
    POSITIVE_FLOAT = 15
    COMPARE_OP = 16
    WHITESPACE = 17
    UNDERSCORE = 18
    PERIOD = 19
    COMMA = 20
    SPACE = 21
    TAB = 22
    HASH = 23
    COLON = 24
    MINUS = 25
    NEWLINE = 26
    ANY = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Watch'", "'Alarm'", "'Stop'", "'Pause'", "'Hold'", "'Wait'", 
            "'Restart'", "'Mark'", "'Batch'", "'Block'", "'End block'", 
            "'End blocks'", "'Increment run counter'", "'_'", "'.'", "','", 
            "' '", "'\\t'", "'#'", "':'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "WATCH", "ALARM", "STOP", "PAUSE", "HOLD", "WAIT", "RESTART", 
            "MARK", "BATCH", "BLOCK", "END_BLOCK", "END_BLOCKS", "INCREMENT_RC", 
            "IDENTIFIER", "POSITIVE_FLOAT", "COMPARE_OP", "WHITESPACE", 
            "UNDERSCORE", "PERIOD", "COMMA", "SPACE", "TAB", "HASH", "COLON", 
            "MINUS", "NEWLINE", "ANY" ]

    ruleNames = [ "LETTER", "DIGIT", "WATCH", "ALARM", "STOP", "PAUSE", 
                  "HOLD", "WAIT", "RESTART", "MARK", "BATCH", "BLOCK", "END_BLOCK", 
                  "END_BLOCKS", "INCREMENT_RC", "IDENTIFIER", "POSITIVE_FLOAT", 
                  "COMPARE_OP", "WHITESPACE", "UNDERSCORE", "PERIOD", "COMMA", 
                  "SPACE", "TAB", "HASH", "COLON", "MINUS", "NEWLINE", "ANY" ]

    grammarFileName = "pcode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


