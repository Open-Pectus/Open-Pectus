# Generated from c:/Projects/Novo/Open-Pectus/openpectus/lang/grammar/pcode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,243,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,14,1,14,5,14,162,8,14,10,14,12,14,165,
        9,14,1,14,1,14,1,14,4,14,170,8,14,11,14,12,14,171,3,14,174,8,14,
        1,15,4,15,177,8,15,11,15,12,15,178,1,15,1,15,4,15,183,8,15,11,15,
        12,15,184,3,15,187,8,15,1,15,4,15,190,8,15,11,15,12,15,191,1,15,
        1,15,4,15,196,8,15,11,15,12,15,197,3,15,200,8,15,3,15,202,8,15,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,215,8,
        16,1,17,1,17,3,17,219,8,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
        21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,3,26,240,
        8,26,1,27,1,27,0,0,28,1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,
        8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,
        19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,1,0,3,2,0,65,90,97,
        122,1,0,48,57,2,0,10,10,13,13,263,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,59,1,
        0,0,0,5,61,1,0,0,0,7,67,1,0,0,0,9,73,1,0,0,0,11,78,1,0,0,0,13,84,
        1,0,0,0,15,89,1,0,0,0,17,94,1,0,0,0,19,102,1,0,0,0,21,107,1,0,0,
        0,23,113,1,0,0,0,25,123,1,0,0,0,27,134,1,0,0,0,29,156,1,0,0,0,31,
        201,1,0,0,0,33,214,1,0,0,0,35,218,1,0,0,0,37,220,1,0,0,0,39,222,
        1,0,0,0,41,224,1,0,0,0,43,226,1,0,0,0,45,228,1,0,0,0,47,230,1,0,
        0,0,49,232,1,0,0,0,51,234,1,0,0,0,53,239,1,0,0,0,55,241,1,0,0,0,
        57,58,7,0,0,0,58,2,1,0,0,0,59,60,7,1,0,0,60,4,1,0,0,0,61,62,5,87,
        0,0,62,63,5,97,0,0,63,64,5,116,0,0,64,65,5,99,0,0,65,66,5,104,0,
        0,66,6,1,0,0,0,67,68,5,65,0,0,68,69,5,108,0,0,69,70,5,97,0,0,70,
        71,5,114,0,0,71,72,5,109,0,0,72,8,1,0,0,0,73,74,5,83,0,0,74,75,5,
        116,0,0,75,76,5,111,0,0,76,77,5,112,0,0,77,10,1,0,0,0,78,79,5,80,
        0,0,79,80,5,97,0,0,80,81,5,117,0,0,81,82,5,115,0,0,82,83,5,101,0,
        0,83,12,1,0,0,0,84,85,5,72,0,0,85,86,5,111,0,0,86,87,5,108,0,0,87,
        88,5,100,0,0,88,14,1,0,0,0,89,90,5,87,0,0,90,91,5,97,0,0,91,92,5,
        105,0,0,92,93,5,116,0,0,93,16,1,0,0,0,94,95,5,82,0,0,95,96,5,101,
        0,0,96,97,5,115,0,0,97,98,5,116,0,0,98,99,5,97,0,0,99,100,5,114,
        0,0,100,101,5,116,0,0,101,18,1,0,0,0,102,103,5,77,0,0,103,104,5,
        97,0,0,104,105,5,114,0,0,105,106,5,107,0,0,106,20,1,0,0,0,107,108,
        5,66,0,0,108,109,5,108,0,0,109,110,5,111,0,0,110,111,5,99,0,0,111,
        112,5,107,0,0,112,22,1,0,0,0,113,114,5,69,0,0,114,115,5,110,0,0,
        115,116,5,100,0,0,116,117,5,32,0,0,117,118,5,98,0,0,118,119,5,108,
        0,0,119,120,5,111,0,0,120,121,5,99,0,0,121,122,5,107,0,0,122,24,
        1,0,0,0,123,124,5,69,0,0,124,125,5,110,0,0,125,126,5,100,0,0,126,
        127,5,32,0,0,127,128,5,98,0,0,128,129,5,108,0,0,129,130,5,111,0,
        0,130,131,5,99,0,0,131,132,5,107,0,0,132,133,5,115,0,0,133,26,1,
        0,0,0,134,135,5,73,0,0,135,136,5,110,0,0,136,137,5,99,0,0,137,138,
        5,114,0,0,138,139,5,101,0,0,139,140,5,109,0,0,140,141,5,101,0,0,
        141,142,5,110,0,0,142,143,5,116,0,0,143,144,5,32,0,0,144,145,5,114,
        0,0,145,146,5,117,0,0,146,147,5,110,0,0,147,148,5,32,0,0,148,149,
        5,99,0,0,149,150,5,111,0,0,150,151,5,117,0,0,151,152,5,110,0,0,152,
        153,5,116,0,0,153,154,5,101,0,0,154,155,5,114,0,0,155,28,1,0,0,0,
        156,173,3,1,0,0,157,162,3,1,0,0,158,162,3,3,1,0,159,162,3,35,17,
        0,160,162,3,37,18,0,161,157,1,0,0,0,161,158,1,0,0,0,161,159,1,0,
        0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,1,0,
        0,0,164,169,1,0,0,0,165,163,1,0,0,0,166,170,3,1,0,0,167,170,3,3,
        1,0,168,170,3,37,18,0,169,166,1,0,0,0,169,167,1,0,0,0,169,168,1,
        0,0,0,170,171,1,0,0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,
        0,0,0,173,163,1,0,0,0,173,174,1,0,0,0,174,30,1,0,0,0,175,177,3,3,
        1,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,179,1,0,
        0,0,179,186,1,0,0,0,180,182,3,39,19,0,181,183,3,3,1,0,182,181,1,
        0,0,0,183,184,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,187,1,
        0,0,0,186,180,1,0,0,0,186,187,1,0,0,0,187,202,1,0,0,0,188,190,3,
        3,1,0,189,188,1,0,0,0,190,191,1,0,0,0,191,189,1,0,0,0,191,192,1,
        0,0,0,192,199,1,0,0,0,193,195,3,41,20,0,194,196,3,3,1,0,195,194,
        1,0,0,0,196,197,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,200,
        1,0,0,0,199,193,1,0,0,0,199,200,1,0,0,0,200,202,1,0,0,0,201,176,
        1,0,0,0,201,189,1,0,0,0,202,32,1,0,0,0,203,215,5,61,0,0,204,205,
        5,61,0,0,205,215,5,61,0,0,206,207,5,60,0,0,207,215,5,61,0,0,208,
        215,5,60,0,0,209,210,5,62,0,0,210,215,5,61,0,0,211,215,5,62,0,0,
        212,213,5,33,0,0,213,215,5,61,0,0,214,203,1,0,0,0,214,204,1,0,0,
        0,214,206,1,0,0,0,214,208,1,0,0,0,214,209,1,0,0,0,214,211,1,0,0,
        0,214,212,1,0,0,0,215,34,1,0,0,0,216,219,3,43,21,0,217,219,3,45,
        22,0,218,216,1,0,0,0,218,217,1,0,0,0,219,36,1,0,0,0,220,221,5,95,
        0,0,221,38,1,0,0,0,222,223,5,46,0,0,223,40,1,0,0,0,224,225,5,44,
        0,0,225,42,1,0,0,0,226,227,5,32,0,0,227,44,1,0,0,0,228,229,5,9,0,
        0,229,46,1,0,0,0,230,231,5,35,0,0,231,48,1,0,0,0,232,233,5,58,0,
        0,233,50,1,0,0,0,234,235,5,45,0,0,235,52,1,0,0,0,236,240,7,2,0,0,
        237,238,5,13,0,0,238,240,5,10,0,0,239,236,1,0,0,0,239,237,1,0,0,
        0,240,54,1,0,0,0,241,242,9,0,0,0,242,56,1,0,0,0,16,0,161,163,169,
        171,173,178,184,186,191,197,199,201,214,218,239,0
    ]

class pcodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WATCH = 1
    ALARM = 2
    STOP = 3
    PAUSE = 4
    HOLD = 5
    WAIT = 6
    RESTART = 7
    MARK = 8
    BLOCK = 9
    END_BLOCK = 10
    END_BLOCKS = 11
    INCREMENT_RC = 12
    IDENTIFIER = 13
    POSITIVE_FLOAT = 14
    COMPARE_OP = 15
    WHITESPACE = 16
    UNDERSCORE = 17
    PERIOD = 18
    COMMA = 19
    SPACE = 20
    TAB = 21
    HASH = 22
    COLON = 23
    MINUS = 24
    NEWLINE = 25
    ANY = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Watch'", "'Alarm'", "'Stop'", "'Pause'", "'Hold'", "'Wait'", 
            "'Restart'", "'Mark'", "'Block'", "'End block'", "'End blocks'", 
            "'Increment run counter'", "'_'", "'.'", "','", "' '", "'\\t'", 
            "'#'", "':'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "WATCH", "ALARM", "STOP", "PAUSE", "HOLD", "WAIT", "RESTART", 
            "MARK", "BLOCK", "END_BLOCK", "END_BLOCKS", "INCREMENT_RC", 
            "IDENTIFIER", "POSITIVE_FLOAT", "COMPARE_OP", "WHITESPACE", 
            "UNDERSCORE", "PERIOD", "COMMA", "SPACE", "TAB", "HASH", "COLON", 
            "MINUS", "NEWLINE", "ANY" ]

    ruleNames = [ "LETTER", "DIGIT", "WATCH", "ALARM", "STOP", "PAUSE", 
                  "HOLD", "WAIT", "RESTART", "MARK", "BLOCK", "END_BLOCK", 
                  "END_BLOCKS", "INCREMENT_RC", "IDENTIFIER", "POSITIVE_FLOAT", 
                  "COMPARE_OP", "WHITESPACE", "UNDERSCORE", "PERIOD", "COMMA", 
                  "SPACE", "TAB", "HASH", "COLON", "MINUS", "NEWLINE", "ANY" ]

    grammarFileName = "pcode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


