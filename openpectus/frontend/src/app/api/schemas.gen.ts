// This file is auto-generated by @hey-api/openapi-ts

export const $AuthConfig = {
    properties: {
        use_auth: {
            type: 'boolean',
            title: 'Use Auth'
        },
        authority_url: {
            type: 'string',
            title: 'Authority Url'
        },
        client_id: {
            type: 'string',
            title: 'Client Id'
        }
    },
    type: 'object',
    required: ['use_auth'],
    title: 'AuthConfig'
} as const;

export const $CommandExample = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        example: {
            type: 'string',
            title: 'Example'
        }
    },
    type: 'object',
    required: ['name', 'example'],
    title: 'CommandExample'
} as const;

export const $CommandSource = {
    type: 'string',
    enum: ['process_value', 'manually_entered', 'unit_button', 'method'],
    title: 'CommandSource',
    description: 'An enumeration.'
} as const;

export const $ControlState = {
    properties: {
        is_running: {
            type: 'boolean',
            title: 'Is Running'
        },
        is_holding: {
            type: 'boolean',
            title: 'Is Holding'
        },
        is_paused: {
            type: 'boolean',
            title: 'Is Paused'
        }
    },
    type: 'object',
    required: ['is_running', 'is_holding', 'is_paused'],
    title: 'ControlState'
} as const;

export const $Error = {
    properties: {
        state: {
            type: 'string',
            enum: ['error'],
            title: 'State'
        }
    },
    type: 'object',
    required: ['state'],
    title: 'Error'
} as const;

export const $ErrorLog = {
    properties: {
        entries: {
            items: {
                '$ref': '#/components/schemas/ErrorLogEntry'
            },
            type: 'array',
            title: 'Entries'
        }
    },
    type: 'object',
    required: ['entries'],
    title: 'ErrorLog'
} as const;

export const $ErrorLogEntry = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        created_time: {
            type: 'string',
            format: 'date-time',
            title: 'Created Time'
        },
        severity: {
            '$ref': '#/components/schemas/ErrorLogSeverity'
        }
    },
    type: 'object',
    required: ['message', 'created_time', 'severity'],
    title: 'ErrorLogEntry'
} as const;

export const $ErrorLogSeverity = {
    type: 'string',
    enum: ['warning', 'error'],
    title: 'ErrorLogSeverity',
    description: 'An enumeration.'
} as const;

export const $ExecutableCommand = {
    properties: {
        command_id: {
            type: 'string',
            title: 'Command Id'
        },
        command: {
            type: 'string',
            title: 'Command'
        },
        source: {
            '$ref': '#/components/schemas/CommandSource'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        value: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessValueCommandNumberValue'
                },
                {
                    '$ref': '#/components/schemas/ProcessValueCommandFreeTextValue'
                },
                {
                    '$ref': '#/components/schemas/ProcessValueCommandChoiceValue'
                }
            ],
            title: 'Value'
        }
    },
    type: 'object',
    required: ['command', 'source'],
    title: 'ExecutableCommand'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $InProgress = {
    properties: {
        state: {
            type: 'string',
            enum: ['in_progress'],
            title: 'State'
        },
        progress_pct: {
            type: 'integer',
            title: 'Progress Pct'
        }
    },
    type: 'object',
    required: ['state', 'progress_pct'],
    title: 'InProgress'
} as const;

export const $Method = {
    properties: {
        lines: {
            items: {
                '$ref': '#/components/schemas/MethodLine'
            },
            type: 'array',
            title: 'Lines'
        }
    },
    type: 'object',
    required: ['lines'],
    title: 'Method'
} as const;

export const $MethodAndState = {
    properties: {
        method: {
            '$ref': '#/components/schemas/Method'
        },
        state: {
            '$ref': '#/components/schemas/MethodState'
        }
    },
    type: 'object',
    required: ['method', 'state'],
    title: 'MethodAndState'
} as const;

export const $MethodLine = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        content: {
            type: 'string',
            title: 'Content'
        }
    },
    type: 'object',
    required: ['id', 'content'],
    title: 'MethodLine'
} as const;

export const $MethodState = {
    properties: {
        started_line_ids: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Started Line Ids'
        },
        executed_line_ids: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Executed Line Ids'
        },
        injected_line_ids: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Injected Line Ids'
        }
    },
    type: 'object',
    required: ['started_line_ids', 'executed_line_ids', 'injected_line_ids'],
    title: 'MethodState'
} as const;

export const $NotOnline = {
    properties: {
        state: {
            type: 'string',
            enum: ['not_online'],
            title: 'State'
        },
        last_seen_date: {
            type: 'string',
            format: 'date-time',
            title: 'Last Seen Date'
        }
    },
    type: 'object',
    required: ['state', 'last_seen_date'],
    title: 'NotOnline'
} as const;

export const $PlotAxis = {
    properties: {
        label: {
            type: 'string',
            title: 'Label'
        },
        process_value_names: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Process Value Names'
        },
        y_max: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                }
            ],
            title: 'Y Max'
        },
        y_min: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                }
            ],
            title: 'Y Min'
        },
        color: {
            type: 'string',
            title: 'Color'
        }
    },
    type: 'object',
    required: ['label', 'process_value_names', 'y_max', 'y_min', 'color'],
    title: 'PlotAxis'
} as const;

export const $PlotColorRegion = {
    properties: {
        process_value_name: {
            type: 'string',
            title: 'Process Value Name'
        },
        value_color_map: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Value Color Map'
        }
    },
    type: 'object',
    required: ['process_value_name', 'value_color_map'],
    title: 'PlotColorRegion'
} as const;

export const $PlotConfiguration = {
    properties: {
        process_value_names_to_annotate: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Process Value Names To Annotate'
        },
        color_regions: {
            items: {
                '$ref': '#/components/schemas/PlotColorRegion'
            },
            type: 'array',
            title: 'Color Regions'
        },
        sub_plots: {
            items: {
                '$ref': '#/components/schemas/SubPlot'
            },
            type: 'array',
            title: 'Sub Plots'
        },
        x_axis_process_value_names: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'X Axis Process Value Names'
        }
    },
    type: 'object',
    required: ['process_value_names_to_annotate', 'color_regions', 'sub_plots', 'x_axis_process_value_names'],
    title: 'PlotConfiguration'
} as const;

export const $PlotLog = {
    properties: {
        entries: {
            additionalProperties: {
                '$ref': '#/components/schemas/PlotLogEntry'
            },
            type: 'object',
            title: 'Entries'
        }
    },
    type: 'object',
    required: ['entries'],
    title: 'PlotLog'
} as const;

export const $PlotLogEntry = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        values: {
            items: {
                '$ref': '#/components/schemas/PlotLogEntryValue'
            },
            type: 'array',
            title: 'Values'
        },
        value_unit: {
            type: 'string',
            title: 'Value Unit'
        },
        value_type: {
            '$ref': '#/components/schemas/ProcessValueType'
        }
    },
    type: 'object',
    required: ['name', 'values', 'value_type'],
    title: 'PlotLogEntry'
} as const;

export const $PlotLogEntryValue = {
    properties: {
        value: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'integer'
                },
                {
                    type: 'string'
                }
            ],
            title: 'Value'
        },
        tick_time: {
            type: 'number',
            title: 'Tick Time'
        }
    },
    type: 'object',
    required: ['tick_time'],
    title: 'PlotLogEntryValue'
} as const;

export const $ProcessDiagram = {
    properties: {
        svg: {
            type: 'string',
            title: 'Svg'
        }
    },
    type: 'object',
    required: ['svg'],
    title: 'ProcessDiagram'
} as const;

export const $ProcessUnit = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Ready'
                },
                {
                    '$ref': '#/components/schemas/Error'
                },
                {
                    '$ref': '#/components/schemas/InProgress'
                },
                {
                    '$ref': '#/components/schemas/NotOnline'
                }
            ],
            title: 'State'
        },
        location: {
            type: 'string',
            title: 'Location'
        },
        runtime_msec: {
            type: 'integer',
            title: 'Runtime Msec'
        },
        current_user_role: {
            '$ref': '#/components/schemas/UserRole'
        }
    },
    type: 'object',
    required: ['id', 'name', 'state', 'current_user_role'],
    title: 'ProcessUnit',
    description: 'Represents a process unit. '
} as const;

export const $ProcessValue = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        value: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'integer'
                },
                {
                    type: 'string'
                }
            ],
            title: 'Value'
        },
        value_unit: {
            type: 'string',
            title: 'Value Unit'
        },
        value_type: {
            '$ref': '#/components/schemas/ProcessValueType'
        },
        commands: {
            items: {
                '$ref': '#/components/schemas/ProcessValueCommand'
            },
            type: 'array',
            title: 'Commands'
        },
        direction: {
            '$ref': '#/components/schemas/TagDirection'
        }
    },
    type: 'object',
    required: ['name', 'value_type', 'direction'],
    title: 'ProcessValue',
    description: 'Represents a process value. '
} as const;

export const $ProcessValueCommand = {
    properties: {
        command_id: {
            type: 'string',
            title: 'Command Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        command: {
            type: 'string',
            title: 'Command'
        },
        disabled: {
            type: 'boolean',
            title: 'Disabled'
        },
        value: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ProcessValueCommandNumberValue'
                },
                {
                    '$ref': '#/components/schemas/ProcessValueCommandFreeTextValue'
                },
                {
                    '$ref': '#/components/schemas/ProcessValueCommandChoiceValue'
                }
            ],
            title: 'Value'
        }
    },
    type: 'object',
    required: ['name', 'command'],
    title: 'ProcessValueCommand'
} as const;

export const $ProcessValueCommandChoiceValue = {
    properties: {
        value: {
            type: 'string',
            title: 'Value'
        },
        value_type: {
            type: 'string',
            enum: ['choice'],
            title: 'Value Type'
        },
        options: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Options'
        }
    },
    type: 'object',
    required: ['value', 'value_type', 'options'],
    title: 'ProcessValueCommandChoiceValue'
} as const;

export const $ProcessValueCommandFreeTextValue = {
    properties: {
        value: {
            type: 'string',
            title: 'Value'
        },
        value_type: {
            type: 'string',
            enum: ['string'],
            title: 'Value Type'
        }
    },
    type: 'object',
    required: ['value', 'value_type'],
    title: 'ProcessValueCommandFreeTextValue'
} as const;

export const $ProcessValueCommandNumberValue = {
    properties: {
        value: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'integer'
                }
            ],
            title: 'Value'
        },
        value_unit: {
            type: 'string',
            title: 'Value Unit'
        },
        valid_value_units: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Valid Value Units'
        },
        value_type: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['int']
                },
                {
                    type: 'string',
                    enum: ['float']
                }
            ],
            title: 'Value Type'
        }
    },
    type: 'object',
    required: ['value', 'value_type'],
    title: 'ProcessValueCommandNumberValue'
} as const;

export const $ProcessValueType = {
    type: 'string',
    enum: ['string', 'float', 'int', 'choice', 'none'],
    title: 'ProcessValueType',
    description: 'An enumeration.'
} as const;

export const $PubSubTopic = {
    type: 'string',
    enum: ['run_log', 'method', 'control_state', 'error_log', 'process_units'],
    title: 'PubSubTopic',
    description: 'An enumeration.'
} as const;

export const $Ready = {
    properties: {
        state: {
            type: 'string',
            enum: ['ready'],
            title: 'State'
        }
    },
    type: 'object',
    required: ['state'],
    title: 'Ready'
} as const;

export const $RecentRun = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        engine_id: {
            type: 'string',
            title: 'Engine Id'
        },
        run_id: {
            type: 'string',
            title: 'Run Id'
        },
        started_date: {
            type: 'string',
            format: 'date-time',
            title: 'Started Date'
        },
        completed_date: {
            type: 'string',
            format: 'date-time',
            title: 'Completed Date'
        },
        uod_filename: {
            type: 'string',
            title: 'Uod Filename'
        },
        uod_author_name: {
            type: 'string',
            title: 'Uod Author Name'
        },
        uod_author_email: {
            type: 'string',
            title: 'Uod Author Email'
        },
        engine_computer_name: {
            type: 'string',
            title: 'Engine Computer Name'
        },
        engine_version: {
            type: 'string',
            title: 'Engine Version'
        },
        engine_hardware_str: {
            type: 'string',
            title: 'Engine Hardware Str'
        },
        aggregator_computer_name: {
            type: 'string',
            title: 'Aggregator Computer Name'
        },
        aggregator_version: {
            type: 'string',
            title: 'Aggregator Version'
        },
        contributors: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Contributors',
            default: []
        }
    },
    type: 'object',
    required: ['id', 'engine_id', 'run_id', 'started_date', 'completed_date', 'uod_filename', 'uod_author_name', 'uod_author_email', 'engine_computer_name', 'engine_version', 'engine_hardware_str', 'aggregator_computer_name', 'aggregator_version'],
    title: 'RecentRun',
    description: 'Represents a historical run of a process unit. '
} as const;

export const $RecentRunCsv = {
    properties: {
        filename: {
            type: 'string',
            title: 'Filename'
        },
        csv_content: {
            type: 'string',
            title: 'Csv Content'
        }
    },
    type: 'object',
    required: ['filename', 'csv_content'],
    title: 'RecentRunCsv'
} as const;

export const $RunLog = {
    properties: {
        lines: {
            items: {
                '$ref': '#/components/schemas/RunLogLine'
            },
            type: 'array',
            title: 'Lines'
        }
    },
    type: 'object',
    required: ['lines'],
    title: 'RunLog'
} as const;

export const $RunLogLine = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        command: {
            '$ref': '#/components/schemas/ExecutableCommand'
        },
        start: {
            type: 'string',
            format: 'date-time',
            title: 'Start'
        },
        end: {
            type: 'string',
            format: 'date-time',
            title: 'End'
        },
        progress: {
            type: 'number',
            title: 'Progress'
        },
        start_values: {
            items: {
                '$ref': '#/components/schemas/ProcessValue'
            },
            type: 'array',
            title: 'Start Values'
        },
        end_values: {
            items: {
                '$ref': '#/components/schemas/ProcessValue'
            },
            type: 'array',
            title: 'End Values'
        },
        forcible: {
            type: 'boolean',
            title: 'Forcible'
        },
        cancellable: {
            type: 'boolean',
            title: 'Cancellable'
        },
        forced: {
            type: 'boolean',
            title: 'Forced'
        },
        cancelled: {
            type: 'boolean',
            title: 'Cancelled'
        }
    },
    type: 'object',
    required: ['id', 'command', 'start', 'start_values', 'end_values'],
    title: 'RunLogLine'
} as const;

export const $SubPlot = {
    properties: {
        axes: {
            items: {
                '$ref': '#/components/schemas/PlotAxis'
            },
            type: 'array',
            title: 'Axes'
        },
        ratio: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                }
            ],
            title: 'Ratio'
        }
    },
    type: 'object',
    required: ['axes', 'ratio'],
    title: 'SubPlot'
} as const;

export const $SystemStateEnum = {
    type: 'string',
    enum: ['Running', 'Paused', 'Holding', 'Waiting', 'Stopped', 'Restarting'],
    title: 'SystemStateEnum',
    description: 'An enumeration.'
} as const;

export const $TagDirection = {
    type: 'string',
    enum: ['input', 'output', 'na', 'unspecified'],
    title: 'TagDirection',
    description: `Specifies whether a tag is read from or written to hardware and whether is can be changed in UI.

Direction of the tag is in relation to the physical IO. Sensors are regarded as inputs and
actuators as outputs. Derived values are regarded as NA.`
} as const;

export const $UserRole = {
    type: 'string',
    enum: ['viewer', 'admin'],
    title: 'UserRole',
    description: 'An enumeration.'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;